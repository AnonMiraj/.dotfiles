# modular arithmetics stolen from Jiangly
snippet code_mint
    template<typename T = void> // default
    struct BiggerType {
        typedef ll type;
    };

    template<> // for long long
    struct BiggerType<ll> {
        typedef __int128 type;
    };

    template<typename T, T mod, typename V = typename BiggerType<T>::type>
    struct mint {
    private:
        inline T norm(T x) const {
            if (x < 0) x += mod;
            if (x >= mod) x -= mod;
            return x;
        }

    public:
        T x;
        mint(T x = 0) : x(norm(x)) {}
        mint(V x) : x(norm(x % mod)) {}
        mint operator-() const { return mint(norm(mod - x)); }
        mint inv() const {
            assert(x != 0);
            return power(mod - 2);
        }
        mint power(T b) const {
            mint res = 1, a = x;
            for (; b; b >>= 1, a *= a) {
                if (b & 1) res *= a;
            }
            return res;
        }
        mint &operator*=(const mint &rhs) {
            x = (V) x * rhs.x % mod;
            return *this;
        }
        mint &operator+=(const mint &rhs) {
            x = norm(x + rhs.x);
            return *this;
        }
        mint &operator-=(const mint &rhs) {
            x = norm(x - rhs.x);
            return *this;
        }
        mint &operator/=(const mint &rhs) { return *this *= rhs.inv(); }
        friend mint operator*(const mint &lhs, const mint &rhs) {
            mint res = lhs;
            res *= rhs;
            return res;
        }
        friend mint operator+(const mint &lhs, const mint &rhs) {
            mint res = lhs;
            res += rhs;
            return res;
        }
        friend mint operator-(const mint &lhs, const mint &rhs) {
            mint res = lhs;
            res -= rhs;
            return res;
        }
        friend mint operator/(const mint &lhs, const mint &rhs) {
            mint res = lhs;
            res /= rhs;
            return res;
        }
        friend bool operator==(const mint &lhs, const mint &rhs) {
            return lhs.x == rhs.x;
        }
        friend std::istream &operator>>(std::istream &is, mint &a) {
            T v;
            return is >> v, a = mint(v), is;
        }
        friend std::ostream &operator<<(std::ostream &os, const mint &a) {
            return os << a.x;
        }
        friend mint max(mint a, mint b) {
            return a.x > b.x ? a : b;
        }
        friend mint min(mint a, mint b) {
            return a.x < b.x ? a : b;
        }
    };

    // constexpr int MOD = 998244353;
    constexpr int MOD = 1000000007;
    using Z = mint<int32_t, MOD>;



# modular combinations
snippet code_ncr
    vector<Z> fact = {1};
    vector<Z> fact_inv = {1};

    void build_fact(int n = 1e6) {
        while ((int) fact.size() < n + 1)
            fact.push_back(fact.back() * (int) fact.size());
        fact_inv.resize(fact.size());
        fact_inv.back() = fact.back().inv();
        for (int j = fact_inv.size() - 2; fact_inv[j].x == 0; j--)
            fact_inv[j] = fact_inv[j + 1] * (j + 1);
    }

    Z ncr(int n, int r) {
        if (r > n || r < 0) return 0;
        if ((int) fact.size() < n + 1) build_fact(n);
        return fact[n] * fact_inv[r] * fact_inv[n - r];
    }



# Description
snippet code_bigint
    template<int base = 10>
    class bigint {
    public:
        vector<int> digits;

        bigint(unsigned ll value = 0) { set_value(value); }

        bigint(string s) {
            digits.resize(s.size());
            for (int i = (int) s.size() - 1; i >= 0; i--) {
                digits[i] = s[(int) s.size() - 1 - i] - '0';
            }
        }

        template<typename RandomIt>
        bigint(RandomIt begin, RandomIt end) {
            digits.assign(begin, end);
        }

        void set_value(ll value) {
            digits.clear();
            while (value) {
                digits.push_back(value % base);
                value /= base;
            }
        }

        int size() const { return digits.size(); }

        void trim() {
            while (digits.back() == 0 && digits.size() > 1)
                digits.pop_back();
        }

        int &operator[](int i) { return digits[i]; }

        int operator[](int i) const { return digits[i]; }

        void operator*=(const bigint &rhs) {
            vector<int> res(size() + rhs.size() + 1);
            for (int i = 0; i < size(); i++) {
                for (int j = 0; j < rhs.size(); j++) {
                    res[i + j] += digits[i] * rhs[j];
                }
            }
            for (int i = 0; i < (int) res.size() - 1; i++) {
                res[i + 1] += res[i] / base;
                res[i] %= base;
            }
            digits = res;
            trim();
        }

        void operator+=(const bigint &rhs) {
            digits.resize(max(size(), rhs.size()) + 1);
            int i;
            for (i = 0; i < rhs.size(); i++) {
                digits[i] += rhs[i];
                if (digits[i] >= base) {
                    digits[i + 1] += digits[i] / base;
                    digits[i] %= base;
                }
            }
            while (i < (int) digits.size() - 1 && digits[i] >= base) {
                digits[i + 1] = digits[i] / base;
                digits[i] %= base;
            }
            trim();
        }

        void operator%=(ll mod) {
            ll p = 1;
            ll res = 0;
            for (int i = 0; i < size(); i++) {
                res = (res + p * digits[i] % mod) % mod;
                p = p * base % mod;
            }
            *this = res;
        }

        friend bool operator==(bigint &lhs, bigint &rhs) {
            return lhs.digits == rhs.digits;
        }

        friend bool operator!=(bigint &lhs, bigint &rhs) {
            return lhs.digits != rhs.digits;
        }

        friend bool operator<(bigint &lhs, bigint &rhs) {
            if (lhs.size() != rhs.size())
                return lhs.size() < rhs.size();
            for (int i = lhs.size() - 1; i >= 0; i--) {
                if (lhs[i] < rhs[i]) return true;
                if (lhs[i] > rhs[i]) return false;
            }
            return false;// equal
        }

        friend ostream &operator<<(ostream &os, const bigint &bi) {
            for (int i = bi.size() - 1; i >= 0; i--) os << bi[i];
            return os;
        }
    };

